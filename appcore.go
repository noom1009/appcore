package main

import (
    "fmt"
    "log"
    "net/http"
    "time"
    "github.com/golang-jwt/jwt/v5" 
    "github.com/noom1009/appcore/config"
    "github.com/noom1009/appcore/database"
    "github.com/noom1009/appcore/logger"
    "github.com/noom1009/appcore/redis"
    "github.com/noom1009/appcore/storage"
    "github.com/noom1009/appcore/messagequeue"
    "github.com/noom1009/appcore/observability"
    "github.com/noom1009/appcore/healthcheck"
    "github.com/noom1009/appcore/middlewares"
)

var jwtSecret []byte

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
func GenerateJWT() (string, error) {
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
        "user_id": 123,
        "role":    "admin",
        "exp":     time.Now().Add(time.Hour * 8).Unix(), 
    })

    return token.SignedString(jwtSecret)
}

// Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö JWT
func protectedHandler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "üéâ Access granted to protected route!")
}

func main() {
    // ‡πÇ‡∏´‡∏•‡∏î config
    config.LoadConfig(".env.yaml")

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ JWT_SECRET ‡∏à‡∏≤‡∏Å .env.yaml
    jwtSecret = []byte(config.AppConfig.JWTSecret)

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô logger
    logger.InitLogger()
    fmt.Println("Initializing appcore...")

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis
    redis.InitRedis(config.AppConfig.Redis.Addr)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á DSN ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Postgres
    dsn := "postgres://" +
        config.AppConfig.DB.User + ":" +
        config.AppConfig.DB.Pass + "@" +
        config.AppConfig.DB.Host + ":" +
        fmt.Sprint(config.AppConfig.DB.Port) + "/" +
        config.AppConfig.DB.Name +
        "?sslmode=disable"

    database.InitPostgres(dsn)

    messagequeue.InitKafka("localhost:9092", "app-topic")
    observability.InitTracer("AppCore")
    healthcheck.StartHealthCheck("8081")
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Bucket
    storage.CreateBucket()

    log.Println("‚úÖ MinIO bucket creation process completed.")

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    token, err := GenerateJWT()
    if err != nil {
        log.Fatalf("‚ùå Failed to generate JWT: %v", err)
    }
    log.Printf("‚úÖ Generated JWT: %s", token)

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö JWT middleware
    http.Handle("/protected", middlewares.JWTMiddleware(http.HandlerFunc(protectedHandler)))

    fmt.Println("‚úÖ AppCore initialized successfully")
    log.Println("‚úÖ Listening on :8080...")
    log.Fatal(http.ListenAndServe(":8080", nil))
}